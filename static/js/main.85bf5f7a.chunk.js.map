{"version":3,"sources":["MyForm.module.scss","MyForm.js","index.js"],"names":["module","exports","minValue","min","value","isNaN","undefined","composeValidators","validators","reduce","error","validator","Condition","when","is","children","name","subscription","input","MyForm","onSubmit","values","a","newDish","JSON","stringify","postHeaders","Headers","append","fetch","method","headers","body","redirect","then","response","text","result","console","log","catch","className","styles","wrapper","validate","e","errors","preparation_time","type","no_of_slices","diameter","spiciness_scale","slices_of_bread","handleSubmit","dishForm","fullWidth","required","component","TextField","label","placeholder","select","MenuItem","buttonWrapper","Button","variant","size","color","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85bf5f7a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyForm_wrapper__zleSf\",\"dishForm\":\"MyForm_dishForm__hFXqY\",\"buttonWrapper\":\"MyForm_buttonWrapper__1Bt_a\"};","import React from \"react\";\nimport { Form, Field } from \"react-final-form\";\nimport { TextField } from \"final-form-material-ui\";\nimport { MenuItem, Button } from \"@material-ui/core\";\nimport styles from \"./MyForm.module.scss\";\n\nconst minValue = (min) => (value) =>\n  isNaN(value) || value >= min ? undefined : `Number can't be less than ${min}`;\n\nconst composeValidators =\n  (...validators) =>\n  (value) =>\n    validators.reduce(\n      (error, validator) => error || validator(value),\n      undefined\n    );\n\nconst Condition = ({ when, is, children}) => (\n  <Field name={when} subscription={{ value: true }}>\n    {({ input: { value } }) => (value === is ? children : null)}\n  </Field>\n);\n\nconst MyForm = () => {\n  const onSubmit = async (values) => {\n    const newDish = JSON.stringify(values, 0, 2);\n    var postHeaders = new Headers();\n    postHeaders.append(\"Content-Type\", \"application/json\");\n\n    const postDishes = {\n      method: \"POST\",\n      headers: postHeaders,\n      body: newDish,\n      redirect: \"follow\",\n    };\n\n    fetch(\"https://frosty-wood-6558.getsandbox.com:443/dishes\", postDishes)\n      .then((response) => response.text())\n      .then((result) => console.log(result))\n      .catch((error) => console.log(\"error\", error));\n  };\n\n  const validate = (e) => {\n    const errors = {};\n\n    if (!e.name) {\n      errors.name = \"Required!\";\n    }\n    if (!e.preparation_time) {\n      errors.preparation_time = \"Required!\";\n    }\n    if (!e.type) {\n      errors.type = \"Required!\";\n    }\n    if (e.type === \"pizza\") {\n      if (!e.no_of_slices)  {\n        errors.no_of_slices = \"Required!\";\n        \n      }\n      if (!e.diameter) {\n        errors.diameter = \"Required!\";\n      }\n    }\n    if (e.type === \"soup\") {\n      if (!e.spiciness_scale) {\n        errors.spiciness_scale = \"Required!\";\n      }\n    }\n\n    if (e.type === \"soup\") {\n      if (!e.slices_of_bread) {\n        errors.slices_of_bread = \"Required!\";\n      }\n    }\n\n    return errors;\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <Form onSubmit={onSubmit} validate={validate}>\n        {({ handleSubmit, values, ...props }) => (\n          <form onSubmit={handleSubmit} className={styles.dishForm}>\n            <Field\n              fullWidth\n              required\n              name=\"name\"\n              component={TextField}\n              type=\"text\"\n              label=\"Dish name\"\n            />\n            <Field\n              fullWidth\n              required\n              name=\"preparation_time\"\n              component={TextField}\n              type=\"text\"\n              label=\"Preparation time\"\n              placeholder=\"00:00:00\"\n            />\n\n            <Field\n              name=\"type\"\n              select\n              label=\"Select dish type\"\n              component={TextField}\n              type=\"time\"\n              fullWidth\n              required\n            >\n              <MenuItem value=\"pizza\">Pizza</MenuItem>\n              <MenuItem value=\"soup\">Soup</MenuItem>\n              <MenuItem value=\"sandwich\">Sandwich</MenuItem>\n            </Field>\n            <Condition when=\"type\" is=\"pizza\">\n              <Field\n                name=\"no_of_slices\"\n                label=\"Number of slices\"\n                component={TextField}\n                type=\"number\"\n                validate={composeValidators(minValue(0))}\n                fullWidth\n                required\n              />\n              <Field\n                name=\"diameter\"\n                label=\"Diameter\"\n                component={TextField}\n                type=\"number\"\n                validate={composeValidators(minValue(0))}\n                // step: 0.1\n                fullWidth\n                required\n              />\n            </Condition>\n            <Condition when=\"type\" is=\"soup\" type=\"number\">\n              <Field\n                name=\"spiciness_scale\"\n                label=\"Spiciness\"\n                component={TextField}\n                type=\"number\"\n                validate={composeValidators(minValue(0))}\n                fullWidth\n                required\n              />\n            </Condition>\n            <Condition when=\"type\" is=\"sandwich\">\n              <Field\n                name=\"slices_of_bread\"\n                label=\"Number of slices of bread\"\n                component={TextField}\n                type=\"number\"\n                validate={composeValidators(minValue(0))}\n                fullWidth\n                required\n              />\n            </Condition>\n            <span className={styles.buttonWrapper}>\n              <Button\n                variant=\"outlined\"\n                size=\"medium\"\n                color=\"primary\"\n                type=\"submit\"\n              >\n                Submit\n              </Button>\n            </span>\n          </form>\n        )}\n      </Form>\n    </div>\n  );\n};\n\nexport default MyForm;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MyForm from './MyForm';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyForm />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}